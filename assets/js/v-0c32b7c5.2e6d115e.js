"use strict";(self.webpackChunkvue3_tree_docs=self.webpackChunkvue3_tree_docs||[]).push([[648],{392:(a,n,s)=>{s.r(n),s.d(n,{default:()=>t});const e=(0,s(252).uE)('<h1 id="emits" tabindex="-1"><a class="header-anchor" href="#emits" aria-hidden="true">#</a> Emits</h1><p>You can access up-to-date data in the operations you perform for the tree with the <code>emit</code>&#39;s we use in the package.</p><h3 id="nodeclick" tabindex="-1"><a class="header-anchor" href="#nodeclick" aria-hidden="true">#</a> <code>nodeClick</code></h3><p>This emit is triggered when a node is clicked or selected.</p><h4 id="usage" tabindex="-1"><a class="header-anchor" href="#usage" aria-hidden="true">#</a> Usage</h4><div class="language-vue ext-vue line-numbers-mode"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Tree</span> <span class="token attr-name">:nodes</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>data<span class="token punctuation">&quot;</span></span> <span class="token attr-name">@nodeClick</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>onNodeClick<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">onNodeClick</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">node</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="nodeexpanded" tabindex="-1"><a class="header-anchor" href="#nodeexpanded" aria-hidden="true">#</a> <code>nodeExpanded</code></h3><p>When you click on an item, you can use the emit &quot;nodeExpanded&quot; if you want to see the current values of that item and the data below it. This way you will only be able to access the data for that item.</p><h4 id="usage-1" tabindex="-1"><a class="header-anchor" href="#usage-1" aria-hidden="true">#</a> Usage</h4><div class="language-vue ext-vue line-numbers-mode"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Tree</span> <span class="token attr-name">:nodes</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>data<span class="token punctuation">&quot;</span></span> <span class="token attr-name">@nodeExpanded</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>onNodeExpanded<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">onNodeExpanded</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">node<span class="token punctuation">,</span> state</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;node: &#39;</span><span class="token punctuation">,</span> node<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;state: &#39;</span><span class="token punctuation">,</span> state<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h3 id="update-nodes" tabindex="-1"><a class="header-anchor" href="#update-nodes" aria-hidden="true">#</a> <code>update:nodes</code></h3><p>Returns the current data of the tree when a data is deleted or a checkbox is clicked in the tree. If you are considering to use <code>@update:nodes</code> for only updating data, you can also use <code>v-model:nodes</code></p><h4 id="usage-2" tabindex="-1"><a class="header-anchor" href="#usage-2" aria-hidden="true">#</a> Usage</h4><div class="language-vue ext-vue line-numbers-mode"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Tree</span> <span class="token attr-name">:nodes</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>data<span class="token punctuation">&quot;</span></span> <span class="token attr-name"><span class="token namespace">@update:</span>nodes</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>onUpdate<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">onUpdate</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">nodes</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;nodes: &#39;</span><span class="token punctuation">,</span> nodes<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div>',17),t={render:function(a,n){return e}}},303:(a,n,s)=>{s.r(n),s.d(n,{data:()=>e});const e={key:"v-0c32b7c5",path:"/guide/emits.html",title:"Emits",lang:"en-US",frontmatter:{},excerpt:"",headers:[{level:3,title:"nodeClick",slug:"nodeclick",children:[]},{level:3,title:"nodeExpanded",slug:"nodeexpanded",children:[]},{level:3,title:"update:nodes",slug:"update-nodes",children:[]}],filePathRelative:"guide/emits.md",git:{updatedTime:1644581371e3,contributors:[{name:"Aykut Karda≈ü",email:"aykutkrds@gmail.com",commits:2},{name:"alper",email:"alper-aga97@hotmail.com",commits:2},{name:"necatikcl",email:"necatifk07@gmail.com",commits:1}]}}}}]);